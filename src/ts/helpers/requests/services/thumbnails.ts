import { getRobloxUrl } from "src/ts/utils/baseUrls.ts" with { type: "macro" };
import { chunk } from "src/ts/utils/objects.ts";
import { httpClient } from "../main.ts";
import type {
	AvatarAssetDefinition,
	AvatarBodyColorsRender,
	AvatarType,
	AvatarScales,
} from "./avatar.ts";

export type ThumbnailType =
	| "Avatar"
	| "AvatarHeadShot"
	| "GameIcon"
	| "BadgeIcon"
	| "GameThumbnail"
	| "GamePass"
	| "Asset"
	| "BundleThumbnail"
	| "Outfit"
	| "GroupIcon"
	| "DeveloperProduct"
	| "AvatarBust"
	| "AutoGeneratedAsset"
	| "PlaceIcon"
	| "AutoGeneratedGameIcon"
	| "ForceAutoGeneratedGameIcon"
	| "Look"
	| "CreatorContextAsset";

export type ThumbnailFormat = "Png" | "Jpeg" | "Webp";

export type BatchThumbnailRequest = {
	requestId: string;
	targetId?: number | bigint | string;
	token?: string;
	alias?: string;
	type?: ThumbnailType;
	size?: string;
	format?: ThumbnailFormat;
	isCircular?: boolean;
};

export type ThumbnailState =
	| "Error"
	| "Completed"
	| "InReview"
	| "Pending"
	| "Blocked"
	| "TemporarilyUnavailable";

export type BatchThumbnailItem = {
	requestId: string;
	errorCode: number;
	errorMessage: string;
	targetId?: number;
	state: ThumbnailState;
	imageUrl: string | null;
};

export type BatchGetThumbnailsRawResponse = {
	data: BatchThumbnailItem[];
};

export type Get3dThumbnailResponse = {
	targetId: number;
	state: ThumbnailState;
	imageUrl: string | null;
	version?: string;
};

export type GetAsset3dThumbnailRequest = {
	assetId: number;
};

export type GetUser3dThumbnailRequest = {
	userId: number;
};

export type RenderThumbnailConfig = {
	thumbnailId: number;
	thumbnailType: "2d" | "3d" | "2dWebp";
	size: string;
};

export type RenderAvatarDefinitionAvatarType = {
	playerAvatarType: AvatarType;
};

export type RenderAvatarDefinition = {
	assets: AvatarAssetDefinition[];
	bodyColors: AvatarBodyColorsRender;
	scales: AvatarScales;
	playerAvatarType: RenderAvatarDefinitionAvatarType;
};

export type RenderAvatarRequest = {
	thumbnailConfig: RenderThumbnailConfig;
	avatarDefinition: RenderAvatarDefinition;
};

export type RenderAvatarResponse = {
	targetId: number;
	state: ThumbnailState;
	imageUrl: string | null;
};

export type GetCloudUserThumbnailRequest = {
	userId: number;
};

export type GetCloudUserThumbnailResponseInner = {
	"@type": string;
	imageUri?: string | null;
};

export type GetCloudUserThumbnailResponse = {
	path: string;
	done: boolean;
	response?: GetCloudUserThumbnailResponseInner;
};

export async function batchGetThumbnails(
	requests: BatchThumbnailRequest[],
): Promise<BatchThumbnailItem[]> {
	if (requests.length > 100) {
		return Promise.all(chunk(requests, 100).map((chunk) => batchGetThumbnails(chunk))).then(
			(chunks) => chunks.flat(),
		);
	}

	return (
		await httpClient.httpRequest<BatchGetThumbnailsRawResponse>({
			method: "POST",
			url: getRobloxUrl("thumbnails", "/v1/batch"),
			body: {
				type: "json",
				value: requests,
			},
			includeCredentials: true,
		})
	).body.data;
}

export async function get3dThumbnail({ assetId }: GetAsset3dThumbnailRequest) {
	return (
		await httpClient.httpRequest<Get3dThumbnailResponse>({
			url: getRobloxUrl("thumbnails", "/v1/assets-thumbnail-3d"),
			search: { assetId },
			includeCredentials: true,
		})
	).body;
}

export async function getUser3dThumbnail(request: GetUser3dThumbnailRequest) {
	return (
		await httpClient.httpRequest<Get3dThumbnailResponse>({
			url: getRobloxUrl("thumbnails", "/v1/users/avatar-3d"),
			search: request,
			includeCredentials: true,
		})
	).body;
}

export async function renderAvatar(request: RenderAvatarRequest): Promise<RenderAvatarResponse> {
	return (
		await httpClient.httpRequest<RenderAvatarResponse>({
			method: "POST",
			url: getRobloxUrl("avatar", "/v1/avatar/render"),
			body: {
				type: "json",
				value: request,
			},
			includeCredentials: true,
		})
	).body;
}

export async function getAnimatedThumbnail({
	assetId,
}: GetAsset3dThumbnailRequest): Promise<Get3dThumbnailResponse> {
	return (
		await httpClient.httpRequest<RenderAvatarResponse>({
			url: getRobloxUrl("thumbnails", "/v1/asset-thumbnail-animated"),
			search: {
				assetId,
			},
			includeCredentials: true,
		})
	).body;
}

export async function getCloudUserThumbnail({
	userId,
	...request
}: GetCloudUserThumbnailRequest): Promise<GetCloudUserThumbnailResponse> {
	return (
		await httpClient.httpRequest<GetCloudUserThumbnailResponse>({
			url: `${getRobloxUrl("apis")}/user/cloud/v2/users/${userId}:generateThumbnail`,
			search: request,
			errorHandling: "BEDEV2",
			includeCredentials: true,
		})
	).body;
}
